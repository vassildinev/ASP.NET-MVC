ASP.NET MVC is technically superior to ASP.NET Web Forms because, having been released five years later, it addresses the business and technology changes that have occurred during the intervening period — testability, separation of concerns, ease of modification, and so on. When it comes to the core function, however, there is nearly no difference.
ASP.NET MVC provides total control over HTML and it offers cleaner interaction with inline JavaScript.
ASP.NET MVC stays closer to the metal of HTML and HTTP, and it gets rid of the thick abstraction layer built on top of Web Forms (viewstate, server controls, page controllers, event-based page lifecycle).
ASP.NET MVC uses interface-based contracts, which allow components to be more easily tested in isolation. As a result, cleaner and more testable code is often promoted as a good reason to embrace ASP.NET MVC.
The runtime environment is the same for ASP.NET Web Forms and ASP.NET MVC applications. That is, the view engine for MVC is the ASP.NET Web Forms engine. This factor enables sites to add MVC blocks incrementally to an existing ASP.NET project, and thus both test and, if desired, transition to MVC. However, MVC enables other view engines to be used as drop-in replacements for Web Forms, including Razor, an engine developed by Microsoft and now bundled with MVC.
The complexity of modern applications requires considerable attention to design: isolation of concerns, testability, scalability, and so on.